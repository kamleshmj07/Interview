>> Defining Pillars of OOPS
	1] Encapsulation: How does this language hide an object’s internal implementation details and preserve data integrity?
		+ Method encapsulations, Use of access modifiers.
	2] Inheritance: How does this language promote code reuse?
		+ Extend behavior of base type, Aggregation or "has-a" relationship.
	3] Polymorphism: How does this language let you treat related objects in a similar way? 
	
>> What is a struct ?
	- Structure types are well suited for modeling mathematical, geometrical, and other "atomic" entities in your application.
	- User defined data type, which can have any number of data fields and data members.
	- Struct can be initialized with or without "new" keyword.
		1] Without "new" keyword : All data fields should be initialized, else throws compile-time error.
		2] With "new" keyword : Uses default constructor and sets data fields to default values.
	- Struct can have a custom constructor but with all the values.
	- Can implement Interfaces.
	- Are implicitly Sealed.

>> What is a class ?
	- Class is a building block of an application.
	- It is a user defined data type with data fields and data members.
	- Ideally a class should follow Single Responsibility Principle (SRP).

>> What is the difference between a struct and a class in C#?
	- https://www.c-sharpcorner.com/UploadFile/yougerthen/what-really-make-difference-between-structures-and-classes/		
	
>> What is a object ?
	- Instance of a class that resides on a managed heap memory.

>> What are the methods a class inherits from Object ?
	- Virtual Members :
		1] bool Equals(Object obj), which is a generic way of comparing two arbitrary objects of equality.
		2] void Finalize(), this method (when overridden) is called to free any allocated resources before the object is destroyed.
		3] int GetHashCode(),this method returns an int that identifies a specific object instance.
		4] strind ToString(), this method returns a string representation of this object, using the <namespace>.<type name> format (or fully qualified name).
	- Instance Level Members :
		1] Type GetType(), which gets the meta-information on the specific type of the current instance.
		2] object MemberwiseClone(), this method exists to return a member-by-member copy of the current object, often used while cloning an object.
	- Static Members :
		1] bool Equals(object objA, object objB), checks value based equality.
		2] bool ReferenceEquals(object objA, object objB), checks reference based equality.

>> What are different types of class members ?
	- There are 2 types of class members : Instance members and Static members.

>> What is a Constructor ?
	- It is a method that is called when an instance of a class is created to put that instance in an early state.
	- It has same name as class & no return type.
	- Using "this(...)" keyword we can pass execution or call multiple constructors on object instantiation. (Constructor Chaining)
	- If you are targeting .NET 4.0 and higher, you can further simplify your programming tasks by making use of optional arguments
	  as an alternative to traditional constructor chaining.

>> Is Constructor overloading possible ?
	- Constructor overloading is possible.
	  
>> What are type of Constructors ?	
	- 2 Types :	
		1] Default Constructor / Parameterless Constructor
		2] Paramererized Constructor

>> Static Constructor
	- A given class may define only a single static constructor i.e. The static constructor cannot be overloaded.
	- A static constructor does not take an access modifier and cannot take any parameters.
	- A static constructor executes exactly one time, regardless of how many objects of the type are created.
	- The runtime invokes the static constructor when it creates an instance of the class or before accessing the first static member invoked by the caller.
	- The static constructor executes before any instance-level constructors.
	- IMP : https://www.codeproject.com/Tips/1157683/Csharp-Inheritance-Interview-Point-of-View
	
>> Object Initializers
	- Syntax/Way to set early state of an object without having a constructor.

>> The checked keyword
	- It is used to handle overflow or underflow conditions which donot throw exceptions in your application.
	
>> out modifier
	- To return a value to the caller we use out modifier, we can get multiple values using this modifier.
	- A method that defines out parameter must assign the parameter to a valid value before exiting the method scope else gives compile time error.
	- The out parameter need not be initialized before passing to method.
	
>> ref modifier
	- To pass a value type as a reference we use the ref modifier.
	- If a reference type is passed by reference, the callee may change the values of the object's state data, as well as the object it is referencing.
	- If a reference type is passed by value, the callee may change the values of the object's state data, but not the object it is referencing.

>> params modifier
	- Used to pass multiple parameters to a method.
	- Example : static double CalculateAverage(params double[] values) // CalculateAverage(4.0, 3.2, 5.7, 64.22, 87.2);

>> Optional parameter
	- Always should be listed after the non-optional parameters.
	- Should have a default value which is resolved at the compile time.
	- Both of above rules if not followed result in commpile-time error.
	
>> Method Overloading
	- The set of methods together in a entity which differ in number of parameters and/or type of parameters and/or return type are said to be overloaded.
	- It is possible to build generic methods that take the concept of overloading to the next level.

>> enum
	- An enum is a custom data type of name/value pairs.
	- The underlying storing type is by default int, and can also be controlled in following manner.
		enum EmpType : byte
		{
		 Manager = 10,
		 Grunt = 1,
		 Contractor = 100
		}
	- It is limited to byte, sbyte, short, ushort, int, uint, long, ulong

>> Stack vs Heap
	- The value types are usually allocated on stack, as data allocated on stack can be created and destroyed quickly as its lifetime is determined by the defining scope.
	- Heap allocated data, on the other hand, is monitored by the .NET garbage collector, and has a lifetime that is determined by a large number of factors.
	- The System.ValueType overrides all the virtual methods from Object class to use value based.
	
>> Passing Reference types as Reference types to a method
	- If a reference type is passed by reference, the callee may change the values of the object’s state data, as well as the object it is referencing.
	- If a reference type is passed by value, the callee may change the values of the object’s state data, but not the object it is referencing. 

>> What are Nullable types ?
	- A nullable type can represent all the values of its underlying type, plus the value "null".
	- It is helpful when working with the relational databases.
	- The "?" suffix notation is a shorthand for creating an instance of the generic System.Nullable<T> structure type.
		1] This has HasValue property or the != operator
		2] The assigned value can be obtained using Value property.
	- "??" operator
		// GetIntFromDatabase() returns nullable int.
		// If the value from GetIntFromDatabase() is null, then	assign local variable to 100.
		int myData = dr.GetIntFromDatabase() ?? 100;
		
>> Access Modifiers	
	- For types directly placed in a namespace, the default modifier is internal.
	- For types and members placed in a type (like a class or structure), the default modifier is private.
	- In C# nothing is public unless stated so
	- Type :	
				1] Public
				2] Private
				3] Protected
				4] Internal
				5] Protected Internal
		
>> readonly modifier
	- Initialize a field only once. Can be initialized in a constructor.
	- Static readonly field can be initialized in a static constructor.
	
>> const keyword
	- Initialize when you declare. It is called compile-time constant.
	- Static internally.
	- https://stackoverflow.com/questions/55984/what-is-the-difference-between-const-and-readonly
	- https://www.codeproject.com/Tips/803656/Practical-Difference-between-Const-ReadOnly

>> Properties
	- Class member that encapsulates a setter/getter for accessing a field.
	- Autoimplemented properties are the ones which do not need field declaration, clr creates for us.
	
>> Indexers
	- It is a way to access elements in a class that will represent a list of values.
	- We declare indexer exactly as we declare a property.
		public string this[string key]
		{
			get {...}
			set {...}
		}
	- Example : HttpCookie

>> Sealed keyword
	- It prevents overriding of a method if applied to a method.
	- It prevents a class to be inherited if applied to a class.
	
>> Inheritance
	- Is-A relationship is inheritance.
	- Benefits : Code reuse and Polymorphic behaviour.
	- https://www.c-sharpcorner.com/UploadFile/e06010/playing-with-inheritance-in-C-Sharp-net/
	
>> Composition
	- Has-A relationship is composition.
	- Benefits : Code reuse, Flexibility and Loose coupling.
	- Example : Use of DbMigrator, Logging.
	
>> Composition vs Inheritance
	- Problem with inheritance :
		1] Easily abused by amateur developers.
		2] Large Hierarchies.
		3] Fragility.
		4] Tightly coupling.

>> Constructor in Inheritance
	- Base class constructors are always called first.
	- : base(..) keyword calls parameterized Base class ctor.
	
>> Coupling
	- Understand Encapsulation, Relationships between classes and Interfaces to implement loosely coupled architecture.
	
>> Abstract Classes 
	- Abstract class is a class which is required to define a common functionality for it's derived classes, 
	  but we never intend to create an instance of the same as it is a too general of a concept.
	- There is no implementation for abstract member.
	- If member is abstract then containing class needs to be declared abstract too.
	- If a method is virtual in a non abstract class A,then class B : A need not mandatorily define or override the virtual method of class A. 
	  To avoid this we need to make class A as abstract.
	- Abstract class can have non abstract members.
	- Abstract class cannot be instantiated.
	
>> Can abstract class have a constructor ?
	- A constructor for an abstract class is required only when you need to initialize certain fields of an abstract class before the instantiation of a child class takes place.
	- Ex : Guid for derived classes (global unique id)
	- Protected identifier should be used.

>> Method Overriding
	- Changing the implementation of an inherited method.
	- Default Implementation : Virtual keyword
	  New Implementation : Override keyword
	- Overridden method is free to levareage base implementation  by using base keyword for calling base method.

>> Member Shadowing (new keyword)
	- Formally speaking, if a derived class defines a member that is identical to a member defined in a base class, the
	  derived class has shadowed the parent’s version. In the real world, the possibility of this occurring is the greatest 
	  when you are subclassing from a class you (or your team) did not create yourselves (for example, if you purchase a third-party .NET software package).
	- In such cases, with the help of "new" keyword we can hide the parent class iherited method/implementation. 
	  Here we cannot change the parent class method and assign vitrual keyword to the same.
	- new keyword can be used with fields, properties, static member, const as well.
	- Finally, be aware that it is still possible to trigger the base class implementation of a shadowed member using an explicit cast
	
>> Upcasting & Downcasting (Watch .Net/C#/Class Interfaces OOP with Mosh P15)
	- Conversion of a derived class to base class is UPCASTING.
		Base obj = Child obj;
		Example :
			StreamReader takes Stream obj.
			ArrayList takes Object obj.
	- Conversion from a base class to derived class is DOWNCASTING.
		Child obj = (Child)Base obj

>> "as" & "is" keyword
	- To prevent the InvalidCastingException while downcasting we use "as" keyword.
	- We use the "is" operator to check the object type		
		
>> Exceptions
	- System Exceptions : Exceptions that are thrown by the .NET platform are (appropriately) called system exceptions.
		+ System exceptions derive directly from a base class named System.SystemException, which in turn derives from System.Exception.
		+ System.SystemException type does not add any additional functionality beyond a set of custom constructors, we can identify the System Exceptions by using "is-a" keyword.
	- Application Level Exceptions : Custom Exceptions Type created by deriving from System.ApplicationException class. The System.ApplicationException class too provides just extra constructors.

>> Building Custom Exceptions (Or simply use Visual Studio code snippet)
	• Derives from Exception/ApplicationException
	• Is marked with the [System.Serializable] attribute
	• Defines a default constructor
	• Defines a constructor that sets the inherited Message property
	• Defines a constructor to handle “inner exceptions”
	• Defines a constructor to handle the serialization of your type

>> Multiple Exception 
	- Make sure your catch blocks are structured such that the very first catch is the most specific exception (i.e., the most derived type in an exception-type inheritance chain), leaving the final catch for the most general (i.e., the base class of a given exception inheritance chain, in this case System.Exception).
	
>> Rethrowing Exceptions
	- Just plain exclusive use of the keyword "throw" allows you to throw the excpeptions further to the method call in the stack.

>> Interfaces and Testability
	- It is a language construct similar to a class but it fundamentally different.
	- Used to build loosely coupled architecture.
	- Used for Extensibility, change the behavior of the application without changing the existing classes.
	- Multiple interfaces can be implemented.
	- Watch Mosh's Interfaces and Testability Part.
		P20 Introduction Interfaces
		P21 Interface Testability
		P22 Interface Extensibility

>> What is extension method in c# and how to use them?
	- Extension methods enable you to add methods to existing types without creating a new derived type, recompiling, or otherwise modifying the original type. 
	- An extension method is a special kind of static method, but they are called as if they were instance methods on the extended type.
	- Extending Types Implementing Specific Interfaces :  It is also possible to define an extension method that can only extend a class or structure that implements the correct interface.
	- https://www.c-sharpcorner.com/uploadfile/puranindia/extension-methods-in-C-Sharp-3-0/

>> What is IEnumerable<> in c#?
	- IEnumerable is the parent interface for all non-generic collections in System.Collections namespace like ArrayList, HastTable.
	- IEnumerable<T> is the parent interface for all generic collections in the System.Collections.Generic .
	- The Generic version of the Interface has a GetEnumerator() method which returns the IEnumerator.
	- IEnumerator allows to iterate through the collection by exposing a Current property and Move,Next and Reset methods, if we don't have this interface as a parent then we can’t use foreach loop or can’t use that class object in our LINQ query.
	
>> The ICloneable interface
	- Gives your custom type the ability to return an identical copy of itself to the caller.
		public interface ICloneable
		{
			object Clone();
		} 
	- The implementation should be able to copy the values of your member variables into a new object instance of the same type, and return it to the user.

>> The IComparable interface
	- It specifies a behavior which allows the object to be sorted based on some specific key.	
		public interface IComparable
		{
			int CompareTo(object o);
		}
		
		Array.Sort(customTypes);

>> Boxing & Unboxing / ValueType & Reference Type
	- Value type to Reference type storing is Boxing.
	- Reference type to Value type storing is Unboxing.
	- https://www.c-sharpcorner.com/article/boxing-and-unboxing/

		
>> Exceptions 
	- To create a Custom Exception, we need to derive from Exception/ApplicationException.
	  Mark the custom exception class with the [System.Serializable] attribute.
	  This class should define a default constructor.
	  Also, Defines a constructor that sets the inherited Message property.
	  Defines a constructor to handle “inner exceptions”.
	  Defines a constructor to handle the serialization of your type.
	- General catch Statements : We can process the catch block without catching any exceptions and throwing any exceptions. Just pure Catch block.
	- Rethrowing Exceptions : We can catch an exception and rethrow just by using the keyword "throw"

	  
>> Processing Multiple Exceptions 
	- The rule of thumb to keep in mind is to make sure your catch blocks are structured such that the very first catch is the most specific exception (i.e., the most derived type in an exception-type inheritance chain), leaving the final catch for the most general (i.e., the base class of a given exception inheritance chain, in this case System.Exception).



>> Generics
	- Generics are type safe containers which help us to use the same logic across different types when it comes to collections/dynamicity.
	- Generics provide better performance because they do not result in boxing or unboxing penalties when storing value types.
	- Generics are type safe because they can contain only the type of type you specify.
	- Generics greatly reduce the need to build custom collection types because you specify the “type of type” when creating the generic container.
	- <T> is a token which is called as "Type Parameter" or "PlaceHolders"
	- Non Generic Class or other Type can have Generic members.
	- Note: Only classes, structures, interfaces, and delegates can be written generically; enum types cannot.
	
	- Constraints :
	
		where T : struct The type parameter <T> must have System.ValueType in its chain of inheritance.
		where T : class The type parameter <T> must not have System.ValueType in its chain of inheritance.
		where T : new() The type parameter <T> must have a default constructor. 
			  This is helpful if your generic type must create an instance of the type parameter 
			  because you cannot assume you know the format of custom constructors. 
			  Note that this constraint must be listed last on a multiconstrained type.
		where T : NameOfBaseClass The type parameter <T> must be derived from the class specified by NameOfBaseClass. 
		where T : NameOfInterface The type parameter <T> must implement the interface specified by NameOfInterface.
			  You can separate multiple interfaces as a commadelimited list.
			  
>> Collections
	- Two Types of Collections : 
		a] Non-Generic
		b] Generic
	- Generic Collections :
		+ Following are the different Generic Interfaces in the namespace : System.Collections.Generic
			ICollection<T> Defines features (e.g., size, enumeration, & thread safety) for all generic collection types.
			IComparer<T> Defines a way to compare to objects.
			IDictionary<TKey, TValue> Allows a generic collection object to represent its contents using key/value pairs.
			IEnumerable<T> Returns the IEnumerator<T> interface for a given object.
			IEnumerator<T> Enables foreach-style iteration over a generic collection.
			IList<T> Provides behavior to add, remove, and index items in a sequential list of objects.
			ISet<T> Provides the base interface for the abstraction of sets.
		+ Dictionary<TKey, TValue>
		  ICollection<T>,IDictionary<TKey, TValue>,IEnumerable<T>
		  Represents a generic collection of keys and values.
		+ LinkedList<T>
		  ICollection<T>, IEnumerable<T>
		  This represents a doubly linked list
		+ List<T>
		  ICollection<T>, IEnumerable<T>, IList<T>
		  This is a dynamically resizable sequential list of items.
		+ Queue<T>
		  ICollection, IEnumerable<T>
		  This is a generic implementation of a first-in, first-out (FIFO) list.
		+ SortedDictionary<TKey, TValue>
		  ICollection<T>, IDictionary<TKey, TValue>, IEnumerable<T>
		  This is a generic implementation of a sorted set of key/value pairs.
		+ SortedSet<T>
		  ICollection<T>, IEnumerable<T>, ISet<T>
  		  This represents a collection of objects that is maintained in sorted order with no duplication.
		+ Stack<T> 
		  ICollection, IEnumerable<T>
		  This is a generic implementation of a last-in, first-out (LIFO) list. 


>> Delegates 
	- Delegate is a type safe object that points to a method or possibly a list of methods in a application.
	- Every delegate is automatically endowed with the ability to call its methods synchronously or asynchronously.
	- When the C# compiler processes delegate types, it automatically generates a sealed class deriving
from System.MulticastDelegate
	- For following code :
		1] Notice that the parameters and return type defined for the Invoke() method exactly match the definition of the delegate.
		2] The initial parameters to BeginInvoke() members (two integers, in our case) are also based on the BinaryOp delegate; 		   however, BeginInvoke() will always provide two final parameters (of type AsyncCallback and object) 
		   that are used to facilitate asynchronous method invocations. 
	
	
		// This is only pseudo-code!
		public sealed class DelegateName : System.MulticastDelegate
		{
		 public delegateReturnValue Invoke(allDelegateInputRefAndOutParams);

		 public IAsyncResult BeginInvoke(allDelegateInputRefAndOutParams, AsyncCallback cb, object state);

		 public delegateReturnValue EndInvoke(allDelegateRefAndOutParams, IAsyncResult result);
		} 

	- The Generic Delegate :
		public delegate void MyGenericDelegate<T>(T arg);
		1] Action<> delegate
			+ The generic Action<> delegate is defined in the System namespaces of mscorlib.dll and System.Core.dll assemblies.
			+ You can use this generic delegate to "point to" a method that takes up to 16 arguments (that ought to be enough!) and returns void
		2] Func<> delegate
			+ The generic Func<> delegate can point to methods that (like Action<>) take up to 16 parameters and
a custom return value.

>> The Event Keyword
	- We don't have to use the custom methods to add/remove methods to a delegate's invocation list when we use Event keyword.
	- Defining Event is a two step process, we have to define a delegate type that will hold the list of methods when an event is fired. Next you declare an Event in terms of related delegate type.
		public delegate void CarEngineHandler(string msg);
		// This car can send these events.
		public event CarEngineHandler Exploded;
		public event CarEngineHandler AboutToBlow; 
	
	
Additional Qns
--------------
What is System.Numerics namespace ?  (Also read on BigInteger)
	It defines a second structure named Complex, which allows you to 
	model mathematically complex numerical data (e.g., imaginary units, real data, hyperbolic tangents). 

What happens if the inherited interfaces have conflicting method names?
What are the differences between IEnumerable and IQueryable?
What is delegates in C# and uses of delegates? https://www.c-sharpcorner.com/UploadFile/f954f5/delegate-in-C-Sharp/
What’s the difference between the System.Array.CopyTo() and System.Array.Clone()?
Exception Handling in C# : https://www.c-sharpcorner.com/article/exception-handling-in-C-Sharp/
What is the difference between dispose and finalize methods in c#?
Difference between Equality Operator (==) and Equals() Method in C# : https://www.c-sharpcorner.com/UploadFile/3d39b4/difference-between-operator-and-equals-method-in-C-Sharp/
How to use Nullable<> Types in .Net? https://www.c-sharpcorner.com/uploadfile/prasoonk/getting-started-with-nullable-types-in-C-Sharp/
What is an Object Pool in .Net? 
	https://www.c-sharpcorner.com/uploadfile/chinnasrihari/object-pool-design-pattern/
	https://www.c-sharpcorner.com/article/object-pooling-in-net/
Working with ObservableCollection<T>.
Overloading Indexer Methods.
Anonymous Type.
Controlling the Underlying Storage for an enum
Named Parameters & Optional Parameters
Yield keyword 
Building a Named Iterator

>> Can we suppress the Garbage collector? If yes, then why ?
    - We can suppress the Garbage Collector. There is the Static method in GC class called as SupressFinalize.
        GC.SuppressFinalize(objectName);
    - This Static method takes a parameter for the object. So we can pass it to suppress the claiming memory for this object.

>> Can we call the Finalize() method to be executed explicitly ?
    - No, the Finalize() method can't be called as Explicitly. 
    - The Garbage collector calls it when the Heap memory is having no space to allocate the new object in the heap.

	
Articles :
==========
http://www.yoda.arachsys.com/csharp/
https://www.c-sharpcorner.com/UploadFile/8ef97c/C-Sharp-net-interview-questions-and-answers/
https://www.c-sharpcorner.com/article/solid-single-responsibility-principle-with-c-sharp/

Potential Article :
===================
Method overloading alternative to build the method using generic and params modifier
