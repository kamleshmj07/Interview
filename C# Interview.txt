>> What is a class ?
	- Class is a building block of an application.
	- It is a user defined data type with data fields and data members.
	- Ideally a class should follow Single Responsibility Principle (SRP).

>> What is a object ?
	- Instance of a class that resides in a memory.

>> What are the methods a class inherits from Object ?
	- Object itself just defines four methods, that are :
		1] ToString, which is a very comfortable way of defining how an instance of the type should presented as a string.
		2] Equals, which is a generic way of comparing two arbitrary objects of equality.
		3] GetHashCode, which gets a numeric indicator if two objects could be equal.
		4] GetType, which gets the meta-information on the specific type of the current instance.
	
>> What are different types of class members ?
	- There are 2 types of class members : Instance members and Static members.

>> What is a Constructor ?
	- It is a method that is called when an instance of a class is created to put that instance in an early state.
	- It has same name as class & no return type.
	- Using "this(...)" keyword we can pass execution or call multiple constructors on object instantiation. (Constructor Chaining)
	
>> What are type of Constructors ?	
	- 2 Types :	1] Default Constructor / Parameterless Constructor
				2] Paramererized Constructor

>> Is Constructor overloading possible ?
	- Constructor overloading is possible.
	
>> Object Initializers
	- Syntax/Way to set early state of an object without having a constructor.
	
>> Access Modifiers	
	- For types directly placed in a namespace, the default modifier is internal.
	- For types and members placed in a type (like a class or structure), the default modifier is private.
	- In C# nothing is public unless stated so
	

>> Params modifier
	- Used to pass multiple parameters to a method.
	
>> Ref modifier
	- To pass a value type as a reference we use the Ref modifier.
	
>> Out modifier
	- To return a value to the caller we use Out modifier, we can get multiple values using this modifier.
	
>> Readonly modifier
	- Initialize a field only once. Can be initialized in a constructor.
	- 
	
>> Const modifier
	- Initialize when you declare. It is called compile-time constant.
	- Static internally.
	- https://stackoverflow.com/questions/55984/what-is-the-difference-between-const-and-readonly
	- https://www.codeproject.com/Tips/803656/Practical-Difference-between-Const-ReadOnly
	
>> Access Modifiers
	- Type :	1] Public
				2] Private
				3] Protected
				4] Internal
				5] Protected Internal

>> Properties
	- Class member that encapsulates a setter/getter for accessing a field.
	- Autoimplemented properties are the ones which do not need field declaration, clr creates for us.
	
>> Indexers
	- It is a way to access elements in a class that will represent a list of values.
	- We declare indexer exactly as we declare a property.
		public string this[string key]
		{
			get {...}
			set {...}
		}
	- Example : HttpCookie 
	
>> Coupling
	- Understand Encapsulation, Relationships between classes and Interfaces to implement loosely coupled architecture.
	
>> Inheritance
	- Is-A relationship is inheritance.
	- Benefits : Code reuse and Polymorphic behaviour.
	
>> Composition
	- Has-A relationship is composition.
	- Benefits : Code reuse, Flexibility and Loose coupling.
	- Example : Use of DbMigrator, Logging.
	
>> Composition vs Inheritance
	- Problem with inheritance :
		1] Easily abused by amateur developers.
		2] Large Hierarchies.
		3] Fragility.
		4] Tightly coupling.

>> Constructor in Inheritance
	- Base class constructors are always called first.
	- : base(..) keyword calls parameterized Base class ctor.
	
>> Upcasting & Downcasting (Watch .Net/C#/Class Interfaces OOP with Mosh P15)
	- Conversion of a derived class to base class is UPCASTING.
		Base obj = Child obj;
		Example : 	StreamReader takes Stream obj.
					ArrayList takes Object obj.
	- Conversion from a base class to derived class is DOWNCASTING.
		Child obj = (Child)Base obj
		
>> "as" & "is" keyword
	- To prevent the InvalidCastingException while downcasting we use "as" keyword.
	- we use the "is" operator to check the object type
	
>> Boxing & Unboxing / ValueType & Reference Type
	- Value type to Reference type storing is Boxing.
	- Reference type to Value type storing is Unboxing.
	- https://www.c-sharpcorner.com/article/boxing-and-unboxing/
	
>> Method Overriding
	- Changing the implementation of an inherited method.
	- Default Implementation : Virtual keyword
	  New Implementation : Override keyword
	- 
	
>> Abstract Classes 
	- No implementation for abstract member.
	- If member is abstract then containing class needs to be declared abstract too.
	- If a method is virtual in a non abstract class A,then class B : A need not mandatorily define or override the virtual method of class A. 
	  To avoid this we need to make class A as abstract.
	- Abstract class can have non abstract members.
	- Abstract class cannot be instantiated.
	
>> Sealed keyword
	- It prevents overriding of a method if applied to a method.
	- It prevents a class to be inherited if applied to a class.

>> What is the difference between a struct and a class in C#?
	- https://www.c-sharpcorner.com/UploadFile/yougerthen/what-really-make-difference-between-structures-and-classes/	

>> Interfaces and Testability
	- It is a language construct similar to a class but it fundamentally different.
	- Used to build loosely coupled architecture.
	- Used for Extensibility, change the behavior of the application without changing the existing classes.
	- Multiple interfaces can be implemented.
	- Watch Mosh's Interfaces and Testability Part.
		P20 Introduction Interfaces
		P21 Interface Testability
		P22 Interface Extensibility

>> What is extension method in c# and how to use them?
	- Extension methods enable you to add methods to existing types without creating a new derived type, recompiling, or otherwise modifying the original type. 
	- An extension method is a special kind of static method, but they are called as if they were instance methods on the extended type.
	- https://www.c-sharpcorner.com/uploadfile/puranindia/extension-methods-in-C-Sharp-3-0/

>> What is IEnumerable<> in c#?
	- IEnumerable is the parent interface for all non-generic collections in System.Collections namespace like ArrayList, HastTable.
	- IEnumerable<T> is the parent interface for all generic collections in the System.Collections.Generic .
	- The Generic version of the Interface has a GetEnumerator() method which returns the IEnumerator.
	- IEnumerator allows to iterate through the collection by exposing a Current property and Move,Next and Reset methods, if we don't have this interface as a parent then we can’t use foreach loop or can’t use that class object in our LINQ query.



>> Generics
	- Generics are type safe containers which help us to use a same blue print across different types when it comes to collections/dynamicity.
	- Generics provide better performance because they do not result in boxing or unboxing penalties when storing value types.
	- Generics are type safe because they can contain only the type of type you specify.
	- Generics greatly reduce the need to build custom collection types because you specify the “type of type” when creating the generic container.
	- <T> is a token which is called as "Type Parameter" or "PlaceHolders"
	
	
	

>> 








	
	
Additional Qns
--------------
What happens if the inherited interfaces have conflicting method names?
What are the differences between IEnumerable and IQueryable?
What is delegates in C# and uses of delegates? https://www.c-sharpcorner.com/UploadFile/f954f5/delegate-in-C-Sharp/
What’s the difference between the System.Array.CopyTo() and System.Array.Clone()?
Exception Handling in C# : https://www.c-sharpcorner.com/article/exception-handling-in-C-Sharp/
What is the difference between dispose and finalize methods in c#?
Difference between Equality Operator (==) and Equals() Method in C# : https://www.c-sharpcorner.com/UploadFile/3d39b4/difference-between-operator-and-equals-method-in-C-Sharp/
How to use Nullable<> Types in .Net? https://www.c-sharpcorner.com/uploadfile/prasoonk/getting-started-with-nullable-types-in-C-Sharp/
What is an Object Pool in .Net? 
	https://www.c-sharpcorner.com/uploadfile/chinnasrihari/object-pool-design-pattern/
	https://www.c-sharpcorner.com/article/object-pooling-in-net/



	
Articles :
==========
http://www.yoda.arachsys.com/csharp/
https://www.c-sharpcorner.com/UploadFile/8ef97c/C-Sharp-net-interview-questions-and-answers/
https://www.c-sharpcorner.com/article/solid-single-responsibility-principle-with-c-sharp/
