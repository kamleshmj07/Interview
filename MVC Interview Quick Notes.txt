>> What is MVC ?
	- Architectural pattern seperating 3 different concerns i.e.
		1] Model => Classes Defined
		2] View => Look and feel
		3] Controller => Controls request

>> MVC Request Cycle (Life Cycle) FFRCER(Fight For Respect Can Evoke Revolution)
	- Create request object
		1] Fill Route Table with route collection inside 'global.asax' .
		2] Fetch Route from "RouteData" object.
		3] "RouteData” object is used to create the “RequestContext” object.
		4] This request object is sent to “MvcHandler” instance to create the controller class instance.
		5] The “ControllerActionInvoker” determines which action to executed and executes the action.
		6] The action method executes and creates the type of result which can be a view result, file result, JSON result etc.

>> What are HTML helpers in MVC?
	- HTML helpers help you to render HTML controls in the view. 
		eg: <%= Html.TextBox("LastName") %>
			<%= Html.CheckBox("Married") %>
			<%= Html.TextBox("CustomerCode") %>
			<%= Html.TextBoxFor(m => m.CustomerCode) %> [Strongly Typed]
			HTML.Display, HTML.DisplayFor, HTML.CheckBox, HTML.Dropdownlist, Html.ActionLink

>> MVC Model Binders
	- ModelBinder maps http requests from view data to the model. 
		Example:
		<form id="frm1" method=post action=”/Customer/SubmitCustomer”>
			Customer code :- <input name="CCode" type="text" />
			Customer name :- <input name="CName" type="text" />
			<input type=submit/>
		</form>
	
		public class Customer
		{
			public string CustomerCode { get; set; }
			public string CustomerName { get; set; }
		}
	
		The HTML control name is different from the class property name. To Map this the HTML to Model Binder is used.
		
		public class CustomerBinder : IModelBinder
		{
			public object BindModel(ControllerContext controllerContext, ModelBindingContext bindingContext)
			{
					HttpRequestBase request = controllerContext.HttpContext.Request;
					string strCustomerCode = request.Form.Get("CCode");
					string strCustomerName = request.Form.Get("CName");

					return new Customer
					{
						CustomerCode = strCustomerCode,
						CustomerName = strCustomerName
					};
			}
		}
		
		public ActionResult SubmitCustomer([ModelBinder(typeof(CustomerBinder))]Customer obj)
		{
			return View(“DisplayCustomer”);
		}
		
>> What is Routing ?
	- Routing helps you to define a URL structure and map the URL structure to the controller.
	- routes.MapRoute() is used to map Routes in RouteConfig Class and registered in global.asax.
	- https://goo.gl/TEU38s

>> How can we navigate from one view to other view using hyperlink ?
	- <%= Html.ActionLink("Home","Gotohome") %>
	
>> How can we maintain session in MVC ?
	- Sessions can be maintained in MVC by 3 ways tempdata, viewdata and viewbag.
		1] Temp data: Helps to maintain data when you move from one controller to other controller or from one action to other action.
					  In other words when you redirect,“tempdata” helps to maintain data between those redirects.
					  It internally uses session variables.
		2] View data: Helps to maintain data when you move from controller to view.
		3] View Bag:  It’s a dynamic wrapper around view data. When you use “Viewbag” type casting is not required. 
					  It uses the dynamic keyword internally.
		4] Session variables: By using session variables we can maintain data from any entity to any entity.
		5] Hidden fields and HTML controls: Helps to maintain data from UI to controller only. 
											So you can send data from HTML controls or hidden fields to the controller using POST or GET HTTP methods.
											
>> What is life of “TempData” ?
	- “TempData” is available for the current request and in the subsequent request it’s available depending on whether “TempData” is read or not.
	  So if “TempData” is once read it will not be available in the subsequent request.
	- @TempData[“MyData”];
	  TempData.Keep(“MyData”);
	- string str = TempData.Peek("Td").ToString();
	
>> What are partial views in MVC ?
	- Partial view is a reusable view (like a user control).
		<% Html.RenderPartial("MyView"); %>
	
>> How can we do validations in MVC ?
	- Validation in MVC is by using data annotations.
		[Required(ErrorMessage="Customer code is required")]
		<%=Html.TextBoxFor(m => m.CustomerCode)%>
		<%=Html.ValidationMessageFor(m => m.CustomerCode)%>
		
	- Later in the controller we can check if the model is proper or not by using “ModelState.IsValid” property and accordingly we can take actions.
	- [StringLength(160)]
	  [RegularExpression(@"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}")]
	  [Range(10,25)]
	  [Compare("Password")]
	- One can get a particular error using "Errors" Collection.
	
>> Can we display all errors in one go ?
	- <%= Html.ValidationSummary() %>
	- 
	
>> Explain Areas in MVC ?
	- Areas help you to group functionalities in to independent modules thus making your project more organized.
	- If we can group controller classes in to logical section like “Invoicing” and “Accounting” that would make life easier and that’s what “Area” are meant to.
	  You can add an area by right clicking on the MVC solution and clicking on “Area” menu as shown in the below figure.
	- Every Area has respective Models Views Controller.
	- Every Area needs to be registered individually.
	
>> What is razor in MVC?
	- It’s a light weight view engine. Till MVC we had only one view type i.e.ASPX, Razor was introduced in MVC 3.
	
>> Why razor when we already had ASPX?
	- Razor is clean, lightweight and syntaxes are easy as compared to ASPX. For example in ASPX to display simple time we need to write.
	
>> What is a Layout ?
	- Layout is a master page in MVC.
	
>> How to apply layout to Razor views ?
	- http://www.tutorialsteacher.com/mvc/layout-view-in-asp.net-mvc
	
>> Explain the concept of Scaffolding?
	- Scaffolding is a technique in which the MVC template helps to auto-generate CRUD code.
	- It creates controller code, view and also table structure.
	- https://www.c-sharpcorner.com/UploadFile/26b237/scaffolding-in-mvc5/
	
>> How can you do authentication and authorization in MVC?
	- You can use windows or forms authentication for MVC.
		1]  Windows authentication for MVC
				<authentication mode="Windows"/>
				<authorization>
					<deny users="?"/>
				</authorization>
				
				[Authorize(Users= @"WIN-3LI600MWLQN\Administrator")]
				public class StartController : Controller
				{
					// GET: /Start/
					[Authorize(Users = @"WIN-3LI600MWLQN\Administrator")]
					public ActionResult Index()
					{
						return View("MyView");
					}
				}

		2] Forms authentication in MVC
				<authentication mode="Forms">
					<forms loginUrl="~/Home/Login" timeout="2880"/>
				</authentication>

				// SET Cookie value
				public ActionResult Login()
				{
					if ((Request.Form["txtUserName"] == "Shiv") && (Request.Form["txtPassword"] == "Shiv@123"))
					{
						FormsAuthentication.SetAuthCookie("Shiv",true);
						return View("About");
					}
					else
					{
						return View("Index");
					}
				}
				
				// 	All the other actions need to be attributed with “Authorize” attribute so that any unauthorized user if he
					makes a call to these controllers it will redirect to the controller ( in this case the controller is “Login”)
					which will do authentication. 
				[Authorize]
				PublicActionResult Default()
				{
					return View();
				}
				
				[Authorize]
				publicActionResult About()
				{
					return View();
				}

	
	
>> What are the different types of results in MVC ?
	1. ViewResult - Renders a specified view to the response stream
	2. PartialViewResult - Renders a specified partial view to the response stream
	3. EmptyResult - An empty response is returned
	4. RedirectResult - Performs an HTTP redirection to a specified URL
	5. RedirectToRouteResult - Performs an HTTP redirection to a URL that is determined by the routing engine, based on given route data
	6. JsonResult - Serializes a given object to JSON format
	7. JavaScriptResult - Returns a piece of JavaScript code that can be executed on the client
	8. ContentResult - Writes content to the response stream without requiring a view
	9. FileContentResult - Returns a file to the client
	10. FileStreamResult - Returns a file to the client, which is provided by a Stream
	11. FilePathResult - Returns a file to the client

	
>> What is the difference between “ActionResult” and “ViewResult”?
	- “ActionResult” is an abstract class while “ViewResult” derives from “ActionResult” class.
	- “ActionResult” can be used to exploit polymorphism and dynamism when returning reponse from Controller.
	
>> What is Attribute based routing ?
[Route("Users/about")] over methods


>> TryUpdateModel
>> AddModelError

>> How can we enable data annotation validation on client side?
	It’s a two-step process first reference the necessary jquery files.
	<script src="<%= Url.Content("~/Scripts/jquery-1.5.1.js") %>"
	type="text/javascript"></script>
	<script src="<%= Url.Content("~/Scripts/jquery.validate.js") %>"
	type="text/javascript"></script>
	<script src="<%= Url.Content("~/Scripts/jquery.validate.unobtrusive.js") %>"
	type="text/javascript"></script>
	Second step is to call “EnableClientValidation” method.
	<% Html.EnableClientValidation(); %>

>> How to implement Ajax in MVC? & What kind of events can be tracked in AJAX ?
	- https://www.c-sharpcorner.com/blogs/using-ajax-in-asp-net-mvc
	- https://www.codeproject.com/Tips/886473/Implementing-AJAX-in-ASP-NET-MVC

>> What are the filters in MVC ?
	- Filters help us implement behaviours pre or post action execution.
	- Types of Filters are :
		1. Action Filters
		2. Authorization Filters
		3. Result Filters
		4. Exception Filters
		
>> What are Action Filters ?
	- Action filters are used to implement the logic that get executed before or after a controller action executes.
	- Output Cache : This filter caches the output of action for certain duration.
		a] [OutputCache(Duration=3600, VaryByParam="none", Location=OutputCacheLocation.Client, NoStore=true)]
			+ The NoStore property is used to inform proxy servers and browser that they should not store a permanent copy of the cached content.
	- Handle Error : It handles the error caused by action/controller, if any exception occurs it redirects the action to custom error page.
		a] [HandleError(View = "Error", ExceptionType = typeof(DivideByZeroException), Order = 1, Master = "")]
			+ Master property is set for Master View for displaying the exception.
	- Authorize : It is used for filtering the authorized user to access the resource.
		a] [Authorize(Users = "kamleshmj07@gmail.com")]
		

>> Can we create our custom view engine using MVC?
	

Additional Qns
--------------
IModelBinderProviders	
	
Articles :
==========
- https://www.c-sharpcorner.com/UploadFile/26b237/database-first-approach-in-entity-framework347/
- https://www.c-sharpcorner.com/article/outputcache-action-filter-in-asp-net-mvc/
