>> Windows Communication Foundation	
	- WCF is a SDK for developing and deploying services.
	- WCF is MS's implementation of set of industry standards defining interoperable service interactions, type conversions, marshaling and protocol management. 
	- WCF client may interoperate with Non WCF services and vice versa.
	- WCF is a unification technology which unites the following technologies:
		1] NET remoting
		2] MSMQ
		3] Web services
		4] COM+
	- WCF we need to 
		1] Creating a service (WCF Library with Service Configuration)
	 	2] Hosting a service (Website >> WCF Service >> SVC >> Codebehind)
	 	3] Consuming a service (Add Service Reference i.e. Wsdl link)
	
>> Services Introduction
	- A Service is a unit of functionality exposed to the world.
	- A Service Oriented Application aggregates service into a single logical application, similar to the way a Component oriented application aggregates components and Object oriented application aggregates objects.
	
>> Messages Introduction
	- Client and service interact by sending recieving messages.
	- Messages tranferred from client to service directly or via intermediaries like Azure Service Bus.
	- WCF uses SOAP messages, independent of transport protocol.

>> Addresses Introduction
	- In WCF, every service is associated with unique address.
	- Address provides 2 important elements : Location and Transport protocol.
	- Basic format : [transport]://[machine or domain][:optional port]/[optional URI]
	- Out of the box WCF provides following transport protocols :
		HTTP/HTTPS : http://localhost:80/MyService or https://localhost:443/MyService , 2 HTTP adresses can share a same port even from same machine.
		TCP	: net.tcp://localhost:808/MyService , 2 TCP adresses can share a same port.
		IPC
		MSMQ
		Service Bus
		WebSocket
		UDP
	
>> Contracts Introduction
	- The contract is a platform-neutral and standard way of describing what the service does.
		1] Service Contracts
			ServiceContract attribute exposes a CLR interface/class as a WCF contract, ready to be consumed.
			Similarly, none of the members of the type implementing ServiceContract will be exposed until you explicitly tag them with OperationContract attribute.
			A few implementation constraints on the service implementation class.
				a) You should avoid parameterized constructors, because WCF will only use the default constructor.
		2] Data Contracts
		3] Fault Contracts
		4] Message Contracts

>> Hosting
	- Every WCF process needs to be hosted in a windows process called Host Process.
		1] A Single host process can host multiple services.
		2] Same service type can be hosted on multiple host processes.
		3] The host process can also be a client process, separate process is recommended though for fault and security isolation.
	- InProcess (or in-proc) hosting is a special case where the hosting process is same as the client process. The developer provides the host in this case.
	- Types of hosting :
		IIS Hosting
			a) Advantage is that host process is launched upon intial client request and IIS manages the lifecycle of the host process.
			b) Disadvantage is that IIS only allows HTTP protocol.
			c) Hosting in IIS need to provide a virtual directory under IIS and supply an .svc file.
					** You can even inject the service code inline in the .svc file, but that is not advisable.
			d) When you use IIS hosting, the base address used for the service always has to be the same as the address of the .svc file.


	
>> Service Library (SL) vs Service Application (SA)
	- SL contains Interfaces and Classes
	- SA contains SL dll and is used for hosting with use of end points.
	
>> EndPoints
	- WCF Service is a program that exposes a collection of Endpoints. 
	- Each Endpoint is a portal itself for communicating with the world.
	- End point consists of three components.
	- A : Address (192.168.10.10)
	  B : Bindings (http, net.tcp, net.pipe, net.msmq)
	  C : Contracts (Interfaces and methods)
	
	<system.serviceModel>
		<services>
			<service name="MulService">
				<endpoint address="http://xxxxx" binding="MyBinding" contract="MulServiceLibrary.IMulService"
				behaviorConfiguration="MyBehavior" />
			</service>
		</services>
		<behaviors>
			<serviceBehaviors>
				<behavior name="MyBehavior">
					<serviceMetadata httpGetEnabled = "true" />
				</behavior>
			</serviceBehaviors>
		</behaviors>
	</system.serviceModel>
	
>> SelfHosting : Used for writing the code in C# to host wcf service, used for debugging.

>> Bindings
	- Binding defines the channel used to communicate with the EndPoint or Service.
	- Client communicates with the Service via Messages.
	- Messages flow via different stages :
		1] Protocol Channel
			a. Transaction Protocol - Gives option to implement a logic inside a Transaction.
			b. Reliable Messaging - Gives option to receive acknowledgement from the service.
			c. Security Protocol - Transport Security and Message Security.
		2] Transport Channel
			a. Message Encoder - Gives option to encode and send messages.
			b. Transport Protocol - The protocol we need to select or choose for sending messages.
	- Frequently used bindings in project : http, wshttp, net.tcp
	- Watch Manzoor's WCF Series : 
		P012 WCF Binding in Config
		P013 WCF Binding in Coding
		P014 WCF Other Important Binding Properties
	- http://www.wcftutorial.net/EndPoint.aspx
	
>> Types of Bindings : 
	1] BasicHttpBinding
		+ This binding uses HTTP as the transport and text/XML as the default message encoding.
		+ Security is disabled by default.
		+ This binding does not support WS-* functionalities like WS- Addressing, WS-Security, WS-ReliableMessaging
	2] WSHttpBinding
		+ Defines a secure, reliable, interoperable binding suitable for non-duplex service contracts.
		+ It supports WS-* functionality and distributed transactions with reliable and secure sessions using SOAP security.
		+ It uses HTTP and HTTPS transport for communication.
		+ Reliable sessions are disabled by default.
	3] WSDualHttpBinding
		+ This binding is same as that of WSHttpBinding, except it supports duplex service. Duplex service is a service which uses duplex message pattern, which allows service to communicate with client via callback.
		+ In WSDualHttpBinding reliable sessions are enabled by default. It also supports communication via SOAP intermediaries.
		
		
>> WS-* is shorthand for the the myriad of specifications that are used for web service messaging.
	Some of the services are:

	WS-Security
	WS-SecureConversation
	WS-Federation
	WS-Authorization
	WS-Policy
	WS-Trust
	WS-Privacy
	WS-Test
		
>> Different Contracts in WCF
	- [ServiceContract] : Applied on service interface. Describes the operations a service performs.
	- [OperationContract] : Applied on the service method. Describes the operations a service performs.
	- [DataContract] : Used on the complex type for passing/receiving the same complex type to/from the OperationContract.
	- [FaultContract] : Describes errors raised by the service and how the errors will be handled and propogated to the clients.
	- Message Contracts : Passing message for passing specific formats.

>> Message Contracts
	- WCF uses SOAP message for communication. In SOAP, WCF allows to customize the message header & define the security for header and body of the message.
	- If a type has both Message and Data contract, service operation will accept only message contract.
	- Rules :
		a] When using Message contract type as parameter, Only one parameter can be used in service Operation
				[OperationContract]
				void SaveEmployeeDetails(EmployeeDetails emp);
		
		b] Service operation either should return Messagecontract type or it should not return any value
				[OperationContract]
				EmployeeDetails GetEmployeeDetails();
		
		c] Service operation will accept and return only message contract type. Other data types are not allowed.
				[OperationContract]
				EmployeeDetails ModifyEmployeeDetails(EmployeeDetails emp);
	- MessageHeaderArray Attribute : http://wcftutorial.net/MessageHeaderArray-Attribute.aspx
	
>> FaultContract

>> Instance Management
	- Basically there are three instance modes in WCF:
		1] Per-Call instance mode
			+ When WCF service is configured for Per-Call instance mode, 
			  Service instance will be created for each client request. 
			  This Service instance will be disposed after response is sent back to client. 
			+ http://www.wcftutorial.net/Per-Call-Service.aspx
		2] Per-Session instance mode
			+ When client creates new proxy to particular service instance, 
			  a dedicated service instance will be provided to the client.
		3] Singleton Instance Mode
			+ All clients are independently connected to the same single instance.
	- Instance mode can be configured using ServiceBehavior attribute.
		[ServiceBehavior(InstanceContextMode=InstanceContextMode.Single)]
		
>> Instance Deactivation in WCF
	- The service instance is basically hosted in a context.
	- Session actually correlated the client message not to the instance of the service, but session is related to the context of the service host.
	- On the session starts, the host creates a new context and when session ends, the context is terminated.
	- By default, the lifetime of the context is the same as that of the instance it hosts.
	- For optimization purposes, WCF provides the option of separating the two lifetimes and deactivating the instance separately from its context.
	- RealeaseInstanceMode.None
	  RealeaseInstanceMode.BeforeCall
	  RealeaseInstanceMode.AfterCall
	  RealeaseInstanceMode.BeforeAndAfterCall
	  
>> 


Additional Qns
--------------	
Transaction Propogation in WCF ?
Concurency in WCF ?
IModelBinder is present in 2 different namespace, Why ?
IModelBinderProvider ?

Azure Service Bus : 
	The Azure Service Bus is as an indispensable tool for the modern developer who is creating connected systems on any platform. 
	The Azure Service Bus has grown into a fully fledged connectivity platform with a diverse set of features.






Articles :
==========
http://www.wcftutorial.net/
Programming WCF Services,4th Edition.pdf 
	>> Chapter 1 : WCF Essentials >> Page 14 >> The Web.Config File
	>> Chapter 1 : WCF Essentials >> Page 15 >> Self Hosting
