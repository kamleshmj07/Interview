>> Why was .Net Framework introduced ?
    - Earlier the numerous features and libraries were built using Component Object Model (i.e. COM) architecture.
    - These were interoperable i.e. C++ written COM library can be accessed by Visual Basic.
    - However, the COM was plagued by complicated infrastructure and a fragile deployment model. Also limited to Windows OS.
    - In 2002 C# & .Net was introduced to overcome all the above drwabacks in COM feature builder.
    
>> Key Benefits of .Net Programming
    - Interoperability with Old COM and new Apps built using the .Net framework.
    - Multiple language support like C#, F#, Visual Basic, etc.
    - Common Engine to compile all the .Net aware languages.
    - Cross language integration.
    
>> What is CLR ?
    - The runtime layer is properly referred to as the Common Language Runtime, or CLR. 
    - The primary role of the CLR is to locate, load, and manage .NET objects on your behalf.
    - CLR also takes care of the number of other things like memory management, security checks, co-ordinating threads and application hosting.
    
>> What is CLS and CTS ?
    - The CTS specification fully describes all possible data types and all programming constructs supported by the runtime, and 
      specifies how these entities can interact with each other.
    - The CLS, is a related specification that defines a subset of common types and programming constructs that all .NET programming languages can agree on.

>> What is Managed or Unmanaged Code?
    - The Code that is developed under the .Net Framework and also executed with the help of CLR is called Managed code.
    - Applications that do not run under the control of the CLR are said to be Unmanaged code.

>> What is a JIT ?
    - JIT compiler is a part of the runtime execution environment that helps in a higher performance by placing the complied code in the cache for a faster execution.
    - Pre-JIT : When an application is being deployed, the Pre-JIT complier compiles the complete source code into a local code in a single compilation cycle.
      Econo-JIT : Econo-JIT compiles only those methods that are called at runtime. However, these compiled methods are removed when they are not required.
      Normal-JIT : Normal-JIT compiles only those methods that are called at runtime and stores in the cache. This increases speed because subsequent calls to these methods are executed from cache.
    
>> Stack vs. Heap: What's the difference?
    - https://www.c-sharpcorner.com/article/C-Sharp-heaping-vs-stacking-in-net-part-i/
	
>> Namespace
	- Any namespace nested within Microsoft (e.g., Microsoft.CSharp, Microsoft.ManagementConsole,
	  Microsoft.Win32) contains types that are used to interact with services unique to the Windows operating
	  system. Given this point, you should not assume that these types could be used successfully on other
	  .NET-enabled operating systems such as Mac OS X. For the most part, this text will not dig into the
	  details of the Microsoft rooted namespaces, so be sure to consult the .NET Framework 4.5 SDK
	  documentation if you are interested.
	  
>> Open source distribution of CLI
	- http://www.mono-project.com/ The Mono project targets various Linux distributions (e.g., SuSe, Fedora), Mac OS X, iOS devices (iPad, iPhone), Android devices, and (surprise!) Windows.
	- http://www.dotgnu.org/ Portable.NET is another open source distribution of the CLI that runs on numerous operating systems (e.g., Windows, AIX, Mac OS X, Solaris, all major Linux distributions).
	
>> WinRT
	- Programming a Windows 8 application requires developers to tap into an entirely new runtime layer
	  termed (appropriately enough) Windows Runtime (WinRT). Be very aware that WinRT is not the .NET
	  CLR, however it does offer some similar services such as garbage collection, support for multiple
	  programming languages (including C#), and so forth.
	  
>> SharpDevelop 
	- SharpDevelop is an open source and feature-rich IDE that you can utilize to build .NET assemblies
	  using C#, VB, Iron Ruby, Iron Python, C++ F#, or a Python-inspired .NET language named Boo. Beyond
	  the fact that this IDE is completely free, it is interesting to note that it was written entirely in C#. 
	- In fact, you have the choice to download and compile the *.cs files manually or run a setup.exe program to
	  install SharpDevelop on your development machine. 
	- Both distributions can be obtained from http://www.sharpdevelop.com
	
>> Visual Studio Templates
	- All code expansion templates are XML-based descriptions of the code to generate within the IDE.
	- Using Visual Studio (as well as Visual C# Express), you can create your own custom code templates. 
	- Details of how to do so can be found in my article “Investigating Code Snippet Technology” at http://msdn.microsoft.com/en-US/library/ms379562


	
	