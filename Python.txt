------------------------------------------- Python Basics
Q: What is a dynamically typed language?
  - Typing refers to type-checking in programming languages.
  - In a strongly-typed language, such as Python, "1" + 2 will result in a type error since these languages don't allow for "type-coercion" (implicit conversion of data types). On the other hand, a weakly-typed language, such as Javascript, will simply output "12" as result.
  - Type-checking can be done at two stages:
    1) Static - Data Types are checked before execution.
    2) Dynamic - Data Types are checked during execution.
  - Python is an interpreted language, executes each statement line by line and thus type-checking is done on the fly, during execution. Hence, Python is a Dynamically Typed Language.


Q: What is PEP 8 and why is it important?
  - PEP stands for Python Enhancement Proposal. 
  - A PEP is an official design document providing information to the Python community, or describing a new feature for Python or its processes. 
  - PEP 8 is especially important since it documents the style guidelines for Python Code. Apparently contributing to the Python open-source community requires you to follow these style guidelines sincerely and strictly.


Q: What are lists and tuples? What is the key difference between the two?
  - Lists and Tuples are both sequence data types that can store a collection of objects in Python.
  - The objects stored in both sequences can have different data types. 
      1) Lists are represented with square brackets ['sara', 6, 0.19], while tuples are represented with parantheses ('ansh', 5, 0.97).
  - The key difference between the two is that while lists are mutable, tuples on the other hand are immutable objects. This means that lists can be modified, appended or sliced on the go but tuples remain constant and cannot be modified in any manner. 


Statement: Python provides type() and isinstance() functions to check the type of variables.


Q: What are global, protected and private attributes in Python?
  - Global variables are public variables that are defined in the global scope. To use the variable in the global scope inside a function, we use the "global" keyword.
  - Protected attributes are attributes defined with an underscore prefixed to their identifier.
      1) eg. _sara. They can still be accessed and modified from outside the class they are defined in but a responsible developer should refrain from doing so.
  - Private attributes are attributes with double underscore prefixed to their identifier
      1) eg. __ansh. They cannot be accessed or modified from the outside directly and will result in an AttributeError if such an attempt is made.


Q: What is slicing in Python?
  - As the name suggests, ‘slicing’ is taking parts of.
  - Syntax for slicing is [start : stop : step]
  - Slicing can be done on strings, arrays, lists, and tuples.


Q: What is the difference between Python Arrays and lists?
  - Arrays in python can only contain elements of same data types i.e., data type of array should be homogeneous. It is a thin wrapper around C language arrays and consumes far less memory than lists.
  - Lists in python can contain elements of different data types i.e., data type of lists can be heterogeneous. It has the disadvantage of consuming large memory.


Q: How is memory managed in Python?
  - Memory management in Python is handled by the Python Memory Manager. The memory allocated by the manager is in form of a private heap space dedicated to Python. All Python objects are stored in this heap and being private, it is inaccessible to the programmer. Though, python does provide some core API functions to work upon the private heap space.
  - Additionally, Python has an in-built garbage collection to recycle the unused memory for the private heap space.


Q: What are decorators in Python?
  - Decorators in Python are essentially functions that add functionality to an existing function in Python without changing the structure of the function itself. 
  - They are represented the @decorator_name in Python and are called in a bottom-up fashion.
  - Decorators are a part of Python’s metaprogramming which are used to add additional functionality to existing code without altering the original structure at compile time. 
  - In Decorators, functions are taken as the argument into another function and then called inside the wrapper function.
  - https://www.codementor.io/@sheena/advanced-use-python-decorators-class-function-du107nxsv
  - https://realpython.com/primer-on-python-decorators/
  - https://www.geeksforgeeks.org/decorators-in-python/


Q: What are Dict and List comprehensions?
  - Python comprehensions, like decorators, are syntactic sugar constructs that help build altered and filtered lists, dictionaries, or sets from a given list, dictionary, or set. 
  - Using comprehensions saves a lot of time and code that might be considerably more verbose (containing more lines of code).  


Q: What is lambda in Python? Why is it used?
  - Lambda is an anonymous function in Python, that can accept any number of arguments, but can only have a single expression. It is generally used in situations requiring an anonymous function for a short time period.
  - Lambda functions can be used in either of the two ways:
    1) Assigning lambda functions to a variable:
      mul = lambda a, b : a * b
      print(mul(2, 5))    # output => 10
    2) Wrapping lambda functions inside another function:
      def myWrapper(n):
        return lambda a : a * n
      mulFive = myWrapper(5)
      print(mulFive(2))   # output => 10


Q: How do you copy an object in Python?
  - In Python, the assignment statement (= operator) does not copy objects. Instead, it creates a binding between the existing object and the target variable name.
  - To create copies of an object in Python, we need to use the copy module.
  - Moreover, there are two ways of creating copies for the given object using the copy module:
    1) Shallow Copy is a bit-wise copy of an object. The copied object created has an exact copy of the values in the original object. If either of the values is a reference to other objects, just the reference addresses for the same are copied.
    2) Deep Copy copies all values recursively from source to target object, i.e. it even duplicates the objects referenced by the source object.


Q: What is pickling and unpickling?
  - Python library offers a feature - serialization out of the box. Serializing an object refers to transforming it into a format that can be stored, so as to be able to deserialize it, later on, to obtain the original object. Here, the pickle module comes into play.
    1) Pickling:
      - Pickling is the name of the serialization process in Python.
      - Any object in Python can be serialized into a byte stream and dumped as a file in the memory.
      - The process of pickling is compact but pickle objects can be compressed further.
      - Moreover, pickle keeps track of the objects it has serialized and the serialization is portable across versions.
      - The function used for the above process is pickle.dump().
    2) Unpickling:
      - Unpickling is the complete inverse of pickling. It deserializes the byte stream to recreate the objects stored in the file and loads the object to memory.
      - The function used for the above process is pickle.load().
  - Note: Python has another, more primitive, serialization module called marshall, which exists primarily to support .pyc files in Python and differs significantly from the pickle.


Q: What are generators in Python?
  - Generators are functions that return an iterable collection of items, one at a time, in a set manner.
  - Generators, in general, are used to create iterators with a different approach. They employ the use of yield keyword rather than return to return a generator object.
  - A generator-function is defined like a normal function, but whenever it needs to generate a value, it does so with the yield keyword rather than return.
  - If the body of a def contains yield, the function automatically becomes a generator function.
  - https://www.geeksforgeeks.org/generators-in-python/


Q: What is the difference between .py and .pyc files?
  - .py files contain the source code of a program. Whereas, .pyc file contains the bytecode of your program. We get bytecode after compilation of .py file (source code). .pyc files are not created for all the files that you run. It is only created for the files that you import.
  - Before executing a python program python interpreter checks for the compiled files. If the file is present, the virtual machine executes it. If not found, it checks for .py file. If found, compiles it to .pyc file and then python virtual machine executes it.
  - Having .pyc file saves you the compilation time


Statement: In Python, arguments are passed by reference, i.e., reference to the actual object is passed.


Q: What does *args and **kwargs mean?
  1) *args :
    - *args is a special syntax used in the function definition to pass variable-length arguments.
    - “*” means variable length and “args” is the name used by convention. You can use any other.
    def multiply(a, b, *argv):
       mul = a * b
       for num in argv:
           mul *= num
       return mul
    print(multiply(1, 2, 3, 4, 5)) #output: 120

  2) **kwargs :
    - **kwargs is a special syntax used in the function definition to pass variable-length keyworded arguments. Here, also, “kwargs” is used just by convention. You can use any other name.
    - Keyworded argument means a variable that has a name when passed to a function. It is actually a dictionary of the variable names and its value.
    def tellArguments(**kwargs):
       for key, value in kwargs.items():
           print(key + ": " + value)
    tellArguments(arg1 = "argument 1", arg2 = "argument 2", arg3 = "argument 3")
    # output:
    # arg1: argument 1
    # arg2: argument 2
    # arg3: argument 3


Q: Why is finalize used?
  - Finalize method is used for freeing up the unmanaged resources and clean up before the garbage collection method is invoked. This helps in performing memory management tasks


Q: What is the Python "with" statement designed for?
  - The "with" statement is used for exception handling to make code cleaner and simpler.
  - It is generally used for the management of common resources like creating, editing, and saving a file.


Statment: With Python 3.6 there is a new convenience notation for big numbers introduced which allows you to divide groups of digits in the number literal so that it is easier to read them.
  a = 1_00_00  # you do not need to group digits by 3!
  b = 0xbad_c0ffee  # you can make fun with hex digit notation
  c = 0b0101_01010101010_0100  # works with binary notation
  f = 1_000_00.0


Q: What is map, filter and reduce?
  - map(function, sequence) : It recieves a function and a sequence then returns a list containing the results obtained by calling that function passing it each item of that sequence.
  - filter(function, sequence) : It recieves a function testing value based on condition and a sequence then returns list of values for which the boolean value returned from the function is true.
  - reduce(function, sequence) : It recieves a function and a sequence then returns a value obtained by combining the items of the sequence using that function.


Q: What are python collections?
  1) Counter:
    - Counter is an unordered collection where elements are stored as Dict keys and their count as dict value.
    - Counter elements count can be positive, zero or negative integers. However there is no restriction on it’s keys and values.
    - Although values are intended to be numbers but we can store other objects too.
    - More on:
        >> https://realpython.com/python-counter/
        >> https://www.digitalocean.com/community/tutorials/python-counter-python-collections-counter

  2) Deque:
    - Python’s deque is a low-level and highly optimized double-ended queue that’s useful for implementing elegant, efficient, and Pythonic queues and stacks, which are the most common list-like data types in computing.
    - In Python list the pop and append items on their left end are not fast enough.
    - Python’s collections module provides a class called deque that’s specially designed to provide fast and memory-efficient ways to append and pop item from both ends of the underlying data structure
    - More on: https://realpython.com/python-deque/






------------------------------------------- Python OOPs
Class
  - It is a complex but logical data type defined with a unique state and behavior

Object
  - It is an instance of a class representing a unique state which may or may not differentiate it's behavior from other objects of same class

Inheritance
  - Inheritance is the capability of one class to derive or inherit the properties from another class.


Q: What is the use of "self" in Python?
  - Self is used to represent the instance of the class. With this keyword, you can access the attributes and methods of the class in python. 


Q: What is __init__ ?
  - __init__ is a contructor method in Python and is automatically called to allocate memory when a new object/instance is created.


Q: What is __del__ ? 
  - This methods acts as a destructor for class
  - It is run at the end of the program or as soon as we perform >> del obj


Q: What are First Class Objects?
  - In Python, functions are first class objects which means that functions in Python can be used or passed as arguments.
  - Properties of first class functions:
      1) A function is an instance of the Object type.
      2) You can store the function in a variable.
      3) You can pass the function as a parameter to another function.
      4) You can return the function from a function.
      5) You can store them in data structures such as hash tables, lists, etc.


Q: What are Magic methods or Dunder (or double underscore) methods?
  - Magic methods are special types of functions that are invoked internally.
  - They start and end with double underscores.
  - Some examples include __add__(), __abs__(), __round__(), __floor__(), __str__(), __trunc__(), __lshift__() etc.
  - The expression number + 5 is the same as number.__add__(5) and this is internally called by other methods or actions.
  - You can directly use these functions as it will decrease the run time of your code due to the fact that now due to direct use, we will be reducing a function call each time.


Q: Type of inheritance in python.
  - Python supports following type of inheritance:
    1) Single Inheritance: Child class derives members of one parent class.
    2) Multi-level Inheritance: A --> B --> C. A is the grandfather class of class C.
    3) Multiple Inheritance: This is achieved when one child class derives members from more than one parent class.
    4) Hierarchical Inheritance: When a parent class is derived by more than one child class


**Q: What is diamond problem in python inheritance? or Method Resolution Order in Python Inheritance?
  - Method resolution order in Python is the order in which a python program resolves or searches for a class in case of multiple inheritance.
  - Important points to be noted
    1) It play's a crucial role for programs using multi-inheritance.
    2) In multi-inheritance a class is derived from more than one base class, hence inheriting all properties of the base class.
    3) In this approach -> the method or attributes are first searched in the base class. If it is not present then the seraching moves a level up -- to the immediate parent class. And if again no luck, then the searching continues following the same search approach.
    4) It follows the depth-first search approach.
        + Now let us understand this through an example: Diamond Inheritance
            >> Diamond Inheritance refers to an ambiguity that arises when two classes i.e. B and C inherit from a superclass A and class D inherits from both class B and C. 
            >> Now, suppose there is a method “demo” which is an overridden method in one of Class B and Class C or both then the ambiguity arises which of the method “demo” Class D should inherit.
            >> The problem is solved in a depth first search fashion. In this code the order of execution will be : class D -> class B -> class C -> class A
            >> Since, the class D will find the method demo() instantly in class B so will execute class B's method and will not search in other classes.
            >> class D(A,B,C) , It is a clear violation, because D cannot start finding the method from A and eventually go to B then C; Then definitely, we will get the error TypeError: Cannot create a consistent method resolution order (MRO) for bases A, B, C
            >> class D(B,C,A) , This will work and call demo method from class B.


Q: Descriptors : https://www.geeksforgeeks.org/descriptor-in-python/
 

Q: How do you access parent members in the child class?
  1) By using Parent class name. You can use the name of the parent class to access the attributes as shown in the example below:
    class Parent(object):
       def __init__(self, name):
           self.name = name    
     
    class Child(Parent): 
       def __init__(self, name, age):
           Parent.name = name      # access using parent class
           self.age = age
     
       def display(self):
           print(Parent.name, self.age)  # access using parent class
     
    # Driver Code
    obj = Child("Interviewbit", 6)
    obj.display()

  2) By using super(). The parent class members can be accessed in child class using the super keyword.
    class Parent(object):
       def __init__(self, name):
           self.name = name    
     
    class Child(Parent):
       def __init__(self, name, age):         
           ''' 
             In Python 3.x, we can also use super().__init__(name)
           ''' 
           super(Child, self).__init__(name)
           self.age = age
     
       def display(self):
          # Note that Parent.name cant be used 
          # here since super() is used in the constructor
          print(self.name, self.age)
      
    # Driver Code
    obj = Child("Interviewbit", 6)
    obj.display()


Q: How will you check if a class is a child of another class?
  - This is done by using a method called issubclass() provided by python. The method tells us if any class is a child of another class by returning true or false accordingly.
  # Driver Code
  print(issubclass(Child, Parent))    #True
  print(issubclass(Parent, Child))    #False


Q: Singleton in python : https://www.geeksforgeeks.org/singleton-method-python-design-patterns/


Q: Monkey patching is changing the behaviour of a function or object after it has already been defined.






What is the Static Method in Python?
  - A static method does not receive an implicit first argument.
  - A static method is also a method that is bound to the class and not the object of the class.
  - This method can’t access or modify the class state.
  - It is present in a class because it makes sense for the method to be present in class.

@classmethod, @staticmethod, @property?











-----------------------
Python Coding Programs:
-----------------------
#------------------------------ A simple generator for Fibonacci Numbers
def fib(limit):
      
    # Initialize first two Fibonacci Numbers 
    a, b = 0, 1
  
    # One by one yield next Fibonacci Number
    while a < limit:
        yield a
        a, b = b, a + b
  
# Create a generator object
x = fib(5)
  
# Iterating over the generator object using next
print(x.next()) # In Python 3, __next__()
print(x.next())
print(x.next())
print(x.next())
print(x.next())
  
# Iterating over the generator object using for
# in loop.
print("\nUsing for in loop")
for i in fib(5): 
    print(i)
-------------------------------------------------------------------------
https://www.codementor.io/@sheena/essential-python-interview-questions-du107ozr6
-------------------------------------------------------------------------
https://www.toptal.com/python/interview-questions
-------------------------------------------------------------------------

-------------------------------------------------------------------------

-------------------------------------------------------------------------
